{"version":3,"sources":["logo.svg","component/SearchForm.js","component/Header.js","component/Row.js","component/DirectoryParent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchForm","props","className","onChange","handleInputChange","value","name","type","placeholder","id","onClick","handleFormSubmit","Header","scope","Row","style","height","width","src","image","phone","email","dob","DirectoryParent","dataToDisplay","data","event","target","setState","preventDefault","searchEmployee","state","search","results","this","filter","item","console","log","map","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"26UAAAA,EAAOC,QAAU,IAA0B,kC,qHCyB5BC,MAtBf,SAAoBC,GAChB,OACI,8BACI,yBAAKC,UAAU,wBACX,2BACIC,SAAUF,EAAMG,kBAChBC,MAAOJ,EAAMI,MACbC,KAAK,SACLC,KAAK,OACLL,UAAU,2BACVM,YAAY,wBACZC,GAAG,WAEP,6BACA,4BAAQC,QAAST,EAAMU,iBAAkBT,UAAU,mBAAnD,a,mCCGDU,MAjBf,SAAgBX,GAEZ,OAEI,+BACI,4BACI,wBAAIY,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,UCODC,MAjBf,SAAab,GAET,OAGI,4BACI,4BAAI,yBAAKc,MAAO,CAAEC,OAAQ,GAAIC,MAAO,IAAMC,IAAKjB,EAAMkB,SACtD,4BAAKlB,EAAMK,MACX,4BAAKL,EAAMmB,OACX,4BAAKnB,EAAMoB,OACX,4BAAKpB,EAAMqB,OCuFRC,E,kDA5FX,aAAe,IAAD,8BACV,gBAFJC,cAAgBC,EACF,EAYdrB,kBAAoB,SAAAsB,GAChB,IAAMrB,EAAQqB,EAAMC,OAAOtB,MACrBC,EAAOoB,EAAMC,OAAOrB,KAC1B,EAAKsB,SAAL,eACKtB,EAAOD,KAhBF,EAuBdM,iBAAmB,SAAAe,GACfA,EAAMG,iBACN,EAAKC,eAAe,EAAKC,MAAMC,SAvB/B,EAAKD,MAAQ,CAETN,KAAM,EAAKD,cACXQ,OAAQ,IALF,E,2DA4BCA,GACX,IAAIC,EAAUC,KAAKV,cAAcW,QAAO,SAAAC,GACpC,OAAOA,EAAK9B,OAAS0B,KAIzBE,KAAKN,SAAS,CAAEH,KAAMQ,M,+BAMtB,OADAI,QAAQC,IAAIJ,KAAKH,OAEb,yBAAK7B,UAAU,OACX,yBAAKA,UAAU,aACX,kDACA,kHAKJ,kBAAC,EAAD,CACIG,MAAO6B,KAAKH,MAAMC,OAClB5B,kBAAmB8B,KAAK9B,kBACxBO,iBAAkBuB,KAAKvB,mBAG3B,2BAAOT,UAAU,SAEb,kBAAC,EAAD,MAEA,+BAEKgC,KAAKH,MAAMN,KAAKc,KAAI,SAAAH,GAEjB,OAAQ,kBAAC,EAAD,CAAKjB,MAAOiB,EAAKjB,MAAOb,KAAM8B,EAAK9B,KAAMc,MAAOgB,EAAKhB,MAAOC,MAAOe,EAAKf,MAAOC,IAAKc,EAAKd,gB,GAjE/FkB,IAAMC,WCYrBC,MAXf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,QCEcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.3ad564c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group container\">\r\n                <input\r\n                    onChange={props.handleInputChange}\r\n                    value={props.value}\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    className=\"form-control text-center\"\r\n                    placeholder=\"Search For a Employee\"\r\n                    id=\"search\"\r\n                />\r\n                <br />\r\n                <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">\r\n                    Search\r\n        </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\n\r\n\r\nfunction Header(props) {\r\n\r\n    return (\r\n\r\n        <thead>\r\n            <tr>\r\n                <th scope=\"col\">Image</th>\r\n                <th scope=\"col\">Name</th>\r\n                <th scope=\"col\">Phone</th>\r\n                <th scope=\"col\">Email</th>\r\n                <th scope=\"col\">DOB</th>\r\n            </tr>\r\n        </thead>\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\n\r\nfunction Row(props) {\r\n\r\n    return (\r\n\r\n\r\n        <tr>\r\n            <td><img style={{ height: 50, width: 50 }} src={props.image}></img></td>\r\n            <td>{props.name}</td>\r\n            <td>{props.phone}</td>\r\n            <td>{props.email}</td>\r\n            <td>{props.dob}</td>\r\n        </tr>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Row;","import React, { Component } from \"react\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport Header from \"./Header\";\r\nimport Row from \"./Row\";\r\nimport data from \"../data.json\";\r\n\r\nclass DirectoryParent extends React.Component {\r\n    dataToDisplay = data;\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n\r\n            data: this.dataToDisplay,\r\n            search: \"\"\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const value = event.target.value;\r\n        const name = event.target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n\r\n\r\n    // When the form is submitted, search the OMDB API for the value of `this.state.search`\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.searchEmployee(this.state.search);\r\n    };\r\n\r\n    searchEmployee(search) {\r\n        let results = this.dataToDisplay.filter(item => {\r\n            return item.name === search;\r\n\r\n        })\r\n\r\n        this.setState({ data: results });\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"jumbotron\">\r\n                    <h1>Employee Directory</h1>\r\n                    <p>Click on carrots to filter by heading or use the search box to narrow your results</p>\r\n\r\n\r\n                </div>\r\n\r\n                <SearchForm\r\n                    value={this.state.search}\r\n                    handleInputChange={this.handleInputChange}\r\n                    handleFormSubmit={this.handleFormSubmit}\r\n                />\r\n\r\n                <table className=\"table\">\r\n\r\n                    <Header />\r\n\r\n                    <tbody>\r\n\r\n                        {this.state.data.map(item => {\r\n\r\n                            return (<Row image={item.image} name={item.name} phone={item.phone} email={item.email} dob={item.dob} />)\r\n                        })}\r\n\r\n\r\n\r\n\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default DirectoryParent;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport data from \"./data.json\";\nimport SearchForm from \"./component/SearchForm\";\nimport DirectoryParent from \"./component/DirectoryParent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DirectoryParent />\n\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}